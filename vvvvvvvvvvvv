1. SINGLE PORT RAM
module spram(clk,addr,datain,en,we,dataout);
input clk,en,we;
input [2:0]addr;
input [7:0]datain;
output reg[7:0]dataout;
reg [7:0]mem[0:7];
initial begin
dataout = 8'd0;
end
always@(posedge(clk))
if(en)
begin
if(we)
mem[addr]=datain;
else
dataout=mem[addr];
end
else
dataout=dataout;
endmodule

module spram_tb;
reg clk,en,we;
reg [2:0]addr;
reg [7:0]datain;
wire [7:0]dataout;
spram sp1(.clk(clk),.addr(addr),.datain(datain),.en(en),.we(we),.dataout(dataout));
initial begin
clk=1;
forever #5 clk=~clk;
end
initial 
begin
en=0;
datain=8'h33;
addr=6'h01;
we=0;
#10
en=1;
datain=8'h13;
addr=6'h04;
we=1;
#10
datain=8'h43;
addr=6'h02;
we=1;
#10
datain=8'h34;
addr=6'h03;
we=1;
#10
en=1;
addr=6'h02;
we=0;
#10
addr=6'h04;
we=0;
#10
addr=6'h03;
we=0;
#10
$finish;
end
endmodule



2. DUAL PORT RAM
module dual_port_ram(
 input [7:0] data_a, data_b, //input data
 input [5:0] addr_a, addr_b, //Port A and Port B address
 input we_a, we_b, //write enable for Port A and Port B
 input clk, //clk
 output reg [7:0] q_a, q_b //output data at Port A and Port B
); 
 reg [7:0] ram [63:0]; //8*64 bit ram
 always @ (posedge clk)
 begin
 if(we_a)
 ram[addr_a] <= data_a;
 else
 q_a <= ram[addr_a]; 
 end
 always @ (posedge clk)
 begin
 if(we_b)
 ram[addr_b] <= data_b;
 else
 q_b <= ram[addr_b]; 
 end
endmodule
module dual_port_ram_tb;
 reg [7:0] data_a, data_b; //input data
 reg [5:0] addr_a, addr_b; //Port A and Port B address
 reg we_a, we_b; //write enable for Port A and Port B
 reg clk; //clk
 wire [7:0] q_a, q_b; //output data at Port A and Port B
 
 dual_port_ram dpr1(.data_a(data_a), .data_b(data_b),
.addr_a(addr_a),.addr_b(addr_b),.we_a(we_a),.we_b(we_b),.clk(clk),.q_a(q_a),.q_b(q_b)
 );
 initial
 begin
 clk=1'b1;
 forever #5 clk = ~clk;
 end
 
 initial
 begin
 data_a = 8'h33;
 addr_a = 6'h01;
 data_b = 8'h44;
 addr_b = 6'h02;
 we_a = 1'b1;
 we_b = 1'b1;
 #10;
 data_a = 8'h55;
 addr_a = 6'h03;
 addr_b = 6'h01;
 we_b = 1'b0;
 #10; 
 addr_a = 6'h02;
 addr_b = 6'h03;
 we_a = 1'b0;
 #10;
 addr_a = 6'h01;
 data_b = 8'h77;
 addr_b = 6'h02;
 we_b = 1'b1;
 #10;
 end
endmodule


3. sync_cntr.v: 
module syn_cntr (clk, rst, count); 
input clk, rst; 
output [3:0] count; 
reg [3:0] count; 
always @(posedge clk) 
begin 
if(!rst) /* considering active low reset */ 
count <= 4'b000; 
else 
count <= count + 1; 
end 
endmodule

sync_cntr_tb.v: 
module syn_cntr_tb; 
reg clk,rst; 
wire [3:0] count; 
syn_cntr u1 (clk, rst, count); 
initial begin 
clk = 1'b0; 
forever #1 clk = ~clk; 
end 
initial begin 
rst = 1'b0; #5 
rst = 1'b1; #40 
$finish; 
end 
endmodule



4. async_cntr.v: 
module asyn_cntr (clk, rst, count); 
input clk, rst; 
output [3:0] count; 
wire high; 
assign high = 1'b1; 
jkff u1 (clk, rst, high, high, count[0]); 
jkff u2 (count[0], rst, high, high, count[1]); 
jkff u3 (count[1], rst, high, high, count[2]); 
jkff u4 (count[2], rst, high, high, count[3]); 
endmodule 
module jkff(clk, rst, j,k,q); 
input j,k,clk,rst; 
output q; 
reg q; 
always @(negedge clk or negedge rst) 
begin 
if (!rst) 
q <= 1'b0; 
else 
begin
case ({j,k}) 
2'b00 : q <= q; 
2'b01 : q <= 1'b0; 
2'b10 : q <= 1'b1; 
2'b11 : q <= ~q; 
endcase 
end 
end 
endmodule 

async_cntr_tb.v: 
module asyn_cntr_tb; 
reg clk, rst; 
wire [3:0] count; 
asyn_cntr u1 (clk, rst, count); 
initial begin 
clk = 1'b0; 
forever #1 clk = ~clk; 
end 
initial begin 
rst = 1'b0; #5 
rst = 1'b1; #40 
$finish; 
end 
endmodule


5. am
module HA(input a,b,output s0,c0);
  assign s0=a^b;
  assign c0=a&b;
endmodule

module FA(input a,b,cin,output s0,c0);
  assign s0=a^b^cin;
  assign c0=((a&b)|(b&cin)|(a&cin));
endmodule

module array_mult(input[3:0]a,b,output [7:0]z);
  reg signed p[4][4];
  wire [10:0]c;
  wire [5:0]s;
  genvar g;
  generate
    for(g=0;g<4;g=g+1) begin
    and a0(p[g][0],a[g],b[0]);
    and a1(p[g][1],a[g],b[1]);
    and a2(p[g][2],a[g],b[2]);    
    and a3(p[g][3],a[g],b[3]);
  end
  endgenerate
  assign z[0]=p[0][0];
  
  //row0
  HA h0(p[0][1],p[1][0],z[1],c[0]);
  HA h1(p[1][1],p[2][0],s[0],c[1]);
  HA h2(p[2][1],p[3][0],s[1],c[2]);
  
  //row1
  FA f0(p[0][2],c[0],s[0],z[2],c[3]);
  FA f1(p[1][2],c[1],s[1],s[2],c[4]);
  FA f2(p[2][2],c[2],p[3][1],s[3],c[5]);
  
  //row2
  FA f3(p[0][3],c[3],s[2],z[3],c[6]);
  FA f4(p[1][3],c[4],s[3],s[4],c[7]);
  FA f5(p[2][3],c[5],p[3][2],s[5],c[8]);
  
  //row3
  HA h3(c[6],s[4],z[4],c[9]);
  FA f6(c[9],c[7],s[5],z[5],c[10]);
  FA f7(c[10],c[8],p[3][3],z[6],z[7]);
endmodule

  module array_mult_tb;
  reg [3:0]a,b;
  wire [7:0]z;
  
  array_mult uut(.a(a),.b(b),.z(z));
  initial begin 
    a=4'b0000;b=4'b1100;#10
    a=4'b1001;b=4'b1101;#10
    a=4'b0001;b=4'b0110;#10
    a=4'b1111;b=4'b1111;#10
    a=4'b0110;b=4'b0011;#10
    $finish;
  end
  initial begin 
    $dumpfile("dump.vcd");
    $dumpvars;
  end
endmodule

    
6. module alu (a, b, code, out );
input [3:0] a, b;
input [2:0] code;
output [7:0] out;
reg [7:0] out ;
wire[7:0] x, y;
assign x = {4'B0000, a};
assign y = {4'B0000, b};
always @ (x, y, code, a,b)
begin
case (code)
3'd0: out = x + y;
3'd1: out = x - y;
3'd2: out = ~x;
3'd3: out = x | y;
3'd4: out = x & y;
3'd5: out = x * y;
3'd6: out = ~(x & y);
3'd7: out = ~(x | y);
default: out = 8'B00000000;
endcase
end
endmodule

module alu_tb;
  
  reg [3:0] a,b;
  reg [2:0] code;
  wire [7:0] out;

  
  alu uut (a,b,code,out );
  initial begin
    
    a=4'b1100;b=4'b0101;code=3'b000;#10
    code=3'b001;#10
    code=3'b010;#10
    code=3'b011;#10
    code=3'b100;#10
    code=3'b101;#10
    code=3'b110;#10
    code=3'b111;#10
    $finish;
  end
  initial begin
    $dumpfile("dump.vcd");
    $dumpvars;
  end
endmodule

7. module cla(a,b,cin,s,cout);
input [3:0]a,b;
input cin;
output [3:0]s;
output cout;
wire c1,c2,c3,c4;
wire [3:0]p,g;

assign p[0]=a[0]^b[0];
assign p[1]=a[1]^b[1];
assign p[2]=a[2]^b[2];
assign p[3]=a[3]^b[3];

assign g[0]=a[0]&b[0];
assign g[1]=a[1]&b[1];
assign g[2]=a[2]&b[3];
assign g[3]=a[3]&b[3];

assign c1= g[0]|p[0]&cin;
assign c2= g[1]|p[1]&c1;
assign c3= g[2]|p[2]&c2;
assign c4= g[3]|p[3]&c3;



  assign s[0]=a[0]^b[0]^cin;
  assign s[1]=a[1]^b[1]^c1;
  assign s[2]=a[2]^b[2]^c2;
  assign s[3]=a[3]^b[3]^c3;
assign cout=c4;

endmodule
  module cla_tb;
reg [3:0]a,b;
reg cin;
wire[3:0]s;
wire cout;
cla cla1(.a(a),.b(b),.cin(cin),.s(s),.cout(cout));
initial begin
a=4'b0011;b=4'b0010;cin=1'b0;#10
a=4'b0010;b=4'b0011;cin=1'b1;#10
a=4'b0111;b=4'b0011;cin=1'b1;#10
  a=4'b1111;b=4'b1011;cin=1'b1;#10
$finish;
end
  initial begin
    $dumpfile("file.vcd");
    $dumpvars;
    
    
end
endmodule

9.  module fifo (
 input wire clk, // Clock signal
 input wire reset, // Reset signal
 input wire write_en, // Write enable signal
 input wire read_en, // Read enable signal
 input wire [7:0] data_in, // Data input
 output reg [7:0] data_out, // Data output
 output reg full, // Full flag output
 output reg empty // Empty flag output
);
parameter DEPTH = 8; // Depth of the FIFO
reg [7:0] memory [0:DEPTH-1];
reg [3:0] write_ptr, read_ptr;
reg [3:0] count;
always @(posedge clk or posedge reset) begin
 if (reset) begin
 write_ptr <= 0;
 read_ptr <= 0;
 count <= 0;
 full <= 0;
 empty <= 1;
 end 
 else begin
 
 // Write operation
 if (write_en && !full) begin
 memory[write_ptr] <= data_in;
 write_ptr <= write_ptr + 1;
 count <= count + 1;
 if (count == DEPTH)
 full <= 1;
 empty <= 0;
 end
 // Read operation
 if (read_en && !empty) begin
 data_out <= memory[read_ptr];
 read_ptr <= read_ptr + 1;
 count <= count - 1;
 if (count == 1)
 empty <= 1;
 full <= 1;
 end
 end
end
endmodule

module fifo_tb;
reg clk = 0;
reg reset = 1;
reg write_en = 0;
reg read_en = 0;
reg [7:0] data_in = 0;
wire [7:0] data_out;
wire full;
wire empty;
integer i;
// Instantiate the FIFO module
fifo fifo_inst ( .clk(clk),.reset(reset),.write_en(write_en), .read_en(read_en),.data_in(data_in),
 .data_out(data_out), .full(full), .empty(empty));
// Clock generation
initial 
begin
clk=1;
forever #5 clk = ~clk;
end
initial begin
 reset = 1;
 #10 reset = 0;
 write_en = 1;
 for ( i = 0; i < 8; i = i + 1) begin
 data_in = i;
 #10;
 end
 write_en = 0;
 read_en = 1;
 #80;
 read_en = 0;
 #200 $finish;
end
  initial begin
    $dumpfile("dump.vcd");
    $dumpvars;
  end
endmodule
